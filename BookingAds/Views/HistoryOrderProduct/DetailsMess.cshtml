    @using BookingAds.Entities
    @using BookingAds.Modules
    @using BookingAds.Controllers
    @using BookingAds.Entities
    @model BookingAds.Models.HistoryOrderProduct.ViewDetailsMess
    @using BookingAds.Models
    @{
        ViewBag.Title = "Chi tiết hoạt động của đơn";
        Layout = "~/Views/Shared/_Layout.cshtml";
    
         var employeeId = ConvertUtils<Employee>.Deserialize(User.Identity.Name).EmployeeID.ToString();
        var firstName = ConvertUtils<Employee>.Deserialize(User.Identity.Name).FirstName.ToString();
        var lastName = ConvertUtils<Employee>.Deserialize(User.Identity.Name).LastName.ToString();
        string fullName = firstName + " " + lastName;
    }

    <style>
   
        .hidden-file-input {
            display: none;
        }

        .thumbnail {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 5px;
            margin-right: 10px;
            position: relative;
        }

        .thumbnail-wrapper {
            position: relative;
            display: inline-block;
            margin-right: 10px;
        }

        .remove-btn {
            position: absolute;
            top: -10px;
            right: -10px;
            background: rgba(255, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            width: 20px;
            height: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .chat-container {
            border: 1px solid #ccc;
            padding: 10px;
            width: 100%;
            margin: 0 auto;
            margin-top: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .chat-input-container {
            display: flex;
            align-items: center;
        }

        .chat-input {
            flex: 1;
            padding: 10px;
            border: none;
            border-radius: 20px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-right: 10px;
        }

        .chat-buttons {
            display: flex;
            align-items: center;
        }

        .chat-image-input {
            display: none;
        }

        .add-image-button {
            background: none;
            border: none;
            cursor: pointer;
            margin-right: 10px;
        }

        .send-button {
            background: none;
            border: none;
            cursor: pointer;
        }

        .thumbnails {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            margin-top: 10px;
        }


        .form {
            display: flex;
            flex-direction: column;
            gap: 10px;
            background-color: #fff;
            padding: 30px;
            border-radius: 20px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif
        }


        .zoomable-video {
            width: 200px; /* Chiều rộng thu nhỏ */
            height: auto; /* Tự động điều chỉnh chiều cao để giữ tỷ lệ */
            cursor: pointer; /* Con trỏ chuột chuyển thành hình bàn tay để chỉ rằng nó có thể click */
            border: 2px solid #ddd; /* Đường viền xung quanh video */
            border-radius: 5px; /* Bo góc đường viền */
            margin: 5px; /* Khoảng cách giữa các video */
        }
        #overlay {
            display: none; /* Ban đầu ẩn overlay */
            position: fixed; /* Cố định vị trí overlay */
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8); /* Nền đen mờ */
            z-index: 1000;
            text-align: center;
        }

        #overlay-inner {
            display: inline-block; /* Hiển thị nội dung overlay */
            position: relative;
            top: 50%;
            transform: translateY(-50%);
        }

        #zoomed-in-image, #zoomed-in-video {
            max-width: 80%;
            max-height: 80%;
            border: 2px solid white;
            border-radius: 5px;
        }

        #zoomed-in-video {
            display: none;
            width: 80%; /* Đặt lại kích thước video khi phóng to */
            height: auto; /* Tự động điều chỉnh chiều cao để giữ tỷ lệ */
        }

        .pa-bd-yellow {
            border-color: #ffcf00 !important
        }

        .border {
            border: 1px solid
        }

        .pb-2 {
            padding-bottom: .75rem !important
        }

        .p-3 {
            padding: 1.5rem !important
        }

        .border-danger {
            border-color: #ff5b5b !important
        }

        .border-bottom {
            border-bottom: 1px solid var(--ct-border-color) !important
        }

        .pa-bd-red-light {
            background-color: #ffa0a0 !important
        }

        .d-inline-block {
            display: inline-block !important
        }

        .mb-0 {
            margin-bottom: 0 !important
        }

        .pa-bd-yellow {
            border-color: #ffcf00 !important
        }

        .pa-bg-yellow {
            background-color: #ffcf00 !important
        }

        .p-10 {
            padding: 10px
        }


        .chat-box {
            max-width: 100%;
            overflow-y: auto;
            height: 500px;
            border: 1px solid #ccc;
            padding: 10px;
        }

        .message {
            margin-bottom: 10px;
            padding: 5px 10px;
            border-radius: 5px;
        }

            .message.admin {
                background-color: #f0f0f0;
                text-align: left;
            }

            .message.user {
                background-color: #007bff;
                color: #fff;
                text-align: right;
            }

        .message-content {
            display: block;
            margin-bottom: 5px;
        }

        .message-images {
            display: flex;
            justify-content: flex-start;
            flex-wrap: wrap;
            margin-top: 5px;
        }

            .message-images img {
                max-width: 100px;
                margin-right: 5px;
                margin-bottom: 5px;
                border-radius: 5px;
            }
        /* CSS */
        #overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            text-align: center;
        }

        #overlay-inner {
            display: inline-block;
            position: relative;
            top: 50%;
            transform: translateY(-50%);
        }

        #zoomed-in-image {
            max-width: 80%;
            max-height: 80%;
            border: 2px solid white;
            border-radius: 5px;
        }

        #close-button {
            position: absolute;
       
            background-color: rgba(255, 255, 255, 0.8);
            border: none;
            border-radius: 5px;
            padding: 5px 10px;
            cursor: pointer;
        }

    </style>
    <div class="container">

        <div class="col-12">

      

            <div class="form" style="margin-top:10px">
         
                <table align="center" border="1" cellpadding="0" cellspacing="0" width="100%" class="lg" style="margin-bottom:30px">
                    <thead style="background:#ededed;border-right:solid 1px #ccc;border-top:solid 1px #ccc">
                        <tr class="titlerow">
                            <th style="text-align:center">Tên Dịch Vụ</th>
                            <th style="text-align:center">Thời Gian Đặt </th>
                            <th style="text-align:center">Trạng Thái</th>
                            <th style="text-align:center">Link Bằng Chứng</th>


                        </tr>
                    </thead>
                    <tbody>
                        
                        <tr class="light">
                            <td class="align-middle" style="text-align:center"><strong class="pa-text-primary">@Model.Order.Product.ProductName </strong></td>
                            <td class="align-middle" style="text-align:center">@Model.Order.OrderedTime</td>
                            @*<td class="align-middle" style="text-align:center">@Model.Order.Status</td>*@


                            @if (@Model.Order.Status == OrderStatus.PENDING.Code)
                            {
                                <td style="text-align: center; display: flex; justify-content: center; " class="badge bg-primary">@OrderStatus.PENDING.Message</td>
                            }
                            else if (@Model.Order.Status == OrderStatus.WAITING.Code)
                            {
                                <td style="text-align: center; display: flex; justify-content: center;" class="badge bg-yellow">@OrderStatus.WAITING.Message</td>
                            }
                            else if (@Model.Order.Status == OrderStatus.PAYING.Code)
                            {
                                <td style="text-align: center; display: flex; justify-content: center;" class="badge bg-yellow">@OrderStatus.PAYING.Message</td>
                            }
                            else if (@Model.Order.Status == OrderStatus.SUCCESSED.Code)
                            {
                                <td style="text-align: center; display: flex; justify-content: center;" class="badge bg-green">@OrderStatus.SUCCESSED.Message</td>
                            }
                            else if (@Model.Order.Status == OrderStatus.FAILED.Code)
                            {
                                <td style="text-align: center; display: flex; justify-content: center;" class="badge bg-red">@OrderStatus.FAILED.Message</td>
                            }
                            else if (@Model.Order.Status == OrderStatus.CANCELED.Code)
                            {
                                <td  style="text-align: center; display: flex; justify-content: center;" class="badge bg-red">@OrderStatus.CANCELED.Message</td>
                            }
                            else if (@Model.Order.Status == OrderStatus.REJECTED.Code)
                            {
                                <td style="text-align: center; display: flex; justify-content: center;" class="badge bg-red">@OrderStatus.REJECTED.Message</td>
                            }


                        <td class="align-middle" style="text-align:center">
                            <a href="@Model.Order.Textlink "target="_blank">Link</a>
                        </td>

                        </tr>
                    </tbody>
                </table>
                <div class="bodycontent">
                    <div class="chat-box">
                        @foreach (var items in Model.DetailMess)
                        {

                            if (items.SenderID != employeeId)
                            {
                                <div class="message admin">
                                    <span class="message-content">@items.Content.Text</span>
                                    <div class="message-images">

                                        @if (!string.IsNullOrEmpty(items.Content.Image))
                                        {
                                            var imagePaths = items.Content.Image.Split(',');
                                            foreach (var path in imagePaths)
                                            {
                                                var fileExtension = Path.GetExtension(path).ToLower();
                                                if (fileExtension == ".jpg" || fileExtension == ".jpeg" || fileExtension == ".png" || fileExtension == ".gif")
                                                {
                                                    // Hiển thị hình ảnh
                                                    <div class="image-container">
                                                        <img class="zoomable-image" src="/Images/HistoryOrder/MessImgDetails/@Url.Content(path)" data-src="/Images/HistoryOrder/MessImgDetails/@Url.Content(path)">
                                                    </div>
                                                }
                                                else if (fileExtension == ".mp4" || fileExtension == ".avi" || fileExtension == ".mov")
                                                {
                                                    // Hiển thị video
                                                    <div class="video-container">
                                                        <video class="zoomable-video" controls>
                                                            <source src="/Images/HistoryOrder/MessImgDetails/@Url.Content(path)" type="video/mp4">
                                                            Trình duyệt của bạn không hỗ trợ thẻ video.
                                                        </video>
                                                    </div>
                                                }
                                            }
                                        }

                                        <div id="overlay">
                                            <div id="overlay-inner">
                                                <img id="zoomed-in-image" src="">
                                                <button id="close-button">Close</button>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            }
                            else
                            {
                                <div class="message user">
                                    <span class="message-content">@items.Content.Text</span>
                                    <div class="message-images" style="justify-content: flex-end">
                                        @if (!string.IsNullOrEmpty(items.Content.Image))
                                        {
                                            var imagePaths = items.Content.Image.Split(',');
                                            foreach (var path in imagePaths)
                                            {
                                                var fileExtension = Path.GetExtension(path).ToLower();
                                                if (fileExtension == ".jpg" || fileExtension == ".jpeg" || fileExtension == ".png" || fileExtension == ".gif")
                                                {
                                                    // Hiển thị hình ảnh
                                                    <div class="image-container">
                                                        <img class="zoomable-image" src="/Images/HistoryOrder/MessImgDetails/@Url.Content(path)" data-src="/Images/HistoryOrder/MessImgDetails/@Url.Content(path)">
                                                    </div>
                                                }
                                                else if (fileExtension == ".mp4" || fileExtension == ".avi" || fileExtension == ".mov")
                                                {
                                                    // Hiển thị video
                                                    <div class="video-container">
                                                        <video class="zoomable-video" controls>
                                                            <source src="/Images/HistoryOrder/MessImgDetails/@Url.Content(path)" type="video/mp4">
                                                            Trình duyệt của bạn không hỗ trợ thẻ video.
                                                        </video>
                                                    </div>
                                                }
                                            }
                                        }

                                        <div id="overlay">
                                            <div id="overlay-inner">
                                                <img id="zoomed-in-image" src="">
                                                <button id="close-button">Close</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }

                    </div>


                        @using (Html.BeginForm("DetailsMess", "HistoryOrderProduct", FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            <input hidden name="orderId" value="@Model.Order.OrderID" />
                            <div class="chat-container">
                                <div id="chatMessages" class="chat-messages"></div>
                                <div class="chat-input-container">
                                    <input type="text" id="chatInput" name="chatInput" class="chat-input" placeholder="Aa" />
                                    <div class="chat-buttons">
                                        <button class="add-image-button" id="chatUploadButton">📷</button>


                                        <input type="file" id="chatImageInput" name="photoUploaded" class="chat-image-input" multiple style="display:none" />

                                        @*@Html.TextBox("photoUploaded", null, new
                                {
                                    @class = "form-control chat-image-input",
                                    @id = "chatImageInput",
                                    @name = "inputchat",
                                    @type = "file",
                                    @size = "20",
                                    @accept = "image/*",
                                    style = "display:none",
                                    multiple = "multiple"
                                })*@



                                        <button class="send-button" id="sendChatButton">➡️</button>
                                    </div>
                                </div>
                                <div id="thumbnailContainer" class="thumbnails"></div>
                            </div>
                        }
                </div>
                    </div>



        </div>
    </div>
    <script>
        const chatUploadButton = document.getElementById('chatUploadButton');
        const chatImageInput = document.getElementById('chatImageInput');
        const chatInput = document.getElementById('chatInput');
        const sendChatButton = document.getElementById('sendChatButton');
        const thumbnailContainer = document.getElementById('thumbnailContainer');

        let chatFiles = [];

        chatUploadButton.addEventListener('click', (event) => {
            event.preventDefault();
            chatImageInput.click();
        });

        chatImageInput.addEventListener('change', () => {
            const files = Array.from(chatImageInput.files);
            chatFiles.push(...files);
            updateThumbnails(chatFiles);
        });
        document.addEventListener("DOMContentLoaded", function () {
            // Hàm cuộn xuống dưới cùng của chat-box
            function scrollToBottom() {
                var chatBox = document.querySelector('.chat-box');
                chatBox.scrollTop = chatBox.scrollHeight;
            }

            // Gọi hàm scrollToBottom khi document đã được load
            scrollToBottom();
        });
        document.addEventListener('DOMContentLoaded', function () {
            var overlay = document.getElementById('overlay');
            var zoomedInImage = document.getElementById('zoomed-in-image');
            var closeButton = document.getElementById('close-button');

            var zoomableImages = document.querySelectorAll('.zoomable-image');
            zoomableImages.forEach(function (image) {
                image.addEventListener('click', function () {
                    var src = image.getAttribute('data-src');
                    zoomedInImage.setAttribute('src', src);
                    overlay.style.display = 'block';
                });
            });

            closeButton.addEventListener('click', function () {
                overlay.style.display = 'none';
            });
        });
        function updateThumbnails(files) {
            thumbnailContainer.innerHTML = '';
            files.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.className = 'thumbnail';

                    const wrapper = document.createElement('div');
                    wrapper.className = 'thumbnail-wrapper';

                    const removeBtn = document.createElement('button');
                    removeBtn.className = 'remove-btn';
                    removeBtn.innerText = '×';
                    removeBtn.addEventListener('click', () => {
                        chatFiles.splice(index, 1);
                        updateThumbnails(chatFiles);
                    });

                    wrapper.appendChild(img);
                    wrapper.appendChild(removeBtn);
                    thumbnailContainer.appendChild(wrapper);
                };
                reader.readAsDataURL(file);
            });
        }
    </script>